import numpy as np
from scipy.interpolate import interp1d

# These are the parameters from the 13 link whisker in CND.
SINGLE_WHISKER_DEFAULT_PARAMETERS = {
    'N': 13,
    'L': [4.08*10**-3]*13,
    'k': [3.26e-5,3.09e-5,2.68e-5,2.16e-5,
          1.64e-5,1.15e-5,7.47e-6,4.40e-5,
          2.28e-6,9.80e-7,3.17e-7,5.97e-8,
          2.73e-9],
    'c': [1.19e-7,7.85e-8,4.98e-8,3.02e-8,
          1.72e-8,9.18e-9,4.46e-9,1.91e-9,
          6.81e-10,1.81e-10,2.59e-11,1.03*10**-12,
                   4.50e-12],
    'm': [3.00e-7,2.35e-7,1.80e-7,1.34e-7,
          9.72e-8,6.76e-8,4.47e-8,2.77e-8,
          1.56e-8,7.71e-9,3.06e-9,8.01e-10,
          6.83e-11],
    'a': None            
    }

RIGHT_WHISKER_ARRAY_PARAMETERS = {
    'RA0': {'base_pos': (0.005359, -0.010331, -0.000461),
            'base_rot': (5.549541, -0.459404, 1.613332), 
            'L': 0.046402, 
            'a': 11.748268 },
    'RA1': {'base_pos': (0.005439, -0.008908, -0.000501), 
            'base_rot': (5.735375, -0.534912, 1.940930), 
            'L': 0.038471,
            'a': 17.032088 },
    'RA2': {'base_pos': (0.005287, -0.007605, -0.000504), 
            'base_rot': (5.921209, -0.594480, 2.268528), 
            'L': 0.030540, 
            'a': 23.317510 },
    'RA3': {'base_pos': (0.004935, -0.006385, -0.000450),
            'base_rot': (6.107043, -0.637638, 2.596127), 
            'L': 0.022609, 
            'a': 30.518353 },
    'RA4': {'base_pos': (0.004375, -0.005211, -0.000339),
            'base_rot': (0.009692, -0.664269, 2.923725), 
            'L': 0.014677, 
            'a': 38.531919 },
    'RB0': {'base_pos': (0.006705, -0.010424, -0.002045),
            'base_rot': (5.549541, -0.204914, 1.415263), 
            'L': 0.048625, 
            'a': 11.748268 },
    'RB1': {'base_pos': (0.006647, -0.008767, -0.002013),
            'base_rot': (5.735375, -0.251200, 1.742861), 
            'L': 0.040693, 
            'a': 17.032088 },
    'RB2': {'base_pos': (0.006403, -0.007298, -0.001974),
            'base_rot': (5.921209, -0.292192, 2.070460), 
            'L': 0.032762, 
            'a': 23.317510 },
    'RB3': {'base_pos': (0.006003, -0.005925, -0.001912),
            'base_rot': (6.107043, -0.325616, 2.398058), 
            'L': 0.024831, 
            'a': 30.518353 },
    'RB4': {'base_pos': (0.005427, -0.004565, -0.001824),
            'base_rot': (0.009692, -0.349534, 2.725656), 
            'L': 0.016900, 
            'a': 38.531919 },
    'RB5': {'base_pos': (0.004602, -0.003154, -0.001715),
            'base_rot': (0.195526, -0.362305, 3.053255), 
            'L': 0.008969, 
            'a': 47.249335 },
    'RC0': {'base_pos': (0.007594, -0.010270, -0.003886),
            'base_rot': (5.549541, 0.031132, 1.217194), 
            'L': 0.050847, 
            'a': 11.748268 },
    'RC1': {'base_pos': (0.007434, -0.008551, -0.003698),
            'base_rot': (5.735375, 0.019401, 1.544793), 
            'L': 0.042916, 
            'a': 17.032088 },
    'RC2': {'base_pos': (0.007135, -0.007037, -0.003583),
            'base_rot': (5.921209, 0.003318, 1.872391), 
            'L': 0.034985, 
            'a': 23.317510 },
    'RC3': {'base_pos': (0.006720, -0.005615, -0.003516),
            'base_rot': (6.107043, -0.015388, 2.199989), 
            'L': 0.027053, 
            'a': 30.518353 },
    'RC4': {'base_pos': (0.006160, -0.004183, -0.003491),
            'base_rot': (0.009692, -0.034805, 2.527588), 
            'L': 0.019122, 
            'a': 38.531919 },
    'RC5': {'base_pos': (0.005380, -0.002657, -0.003523),
            'base_rot': (0.195526, -0.052958, 2.855186), 
            'L': 0.011191, 
            'a': 47.249335 },
    'RC6': {'base_pos': (0.004233, -0.000994, -0.003652),
            'base_rot': (0.381360, -0.067923, 3.182784), 
            'L': 0.003260, 
            'a': 56.562579 },
    'RD0': {'base_pos': (0.007990, -0.009891, -0.005860),
            'base_rot': (5.549541, 0.269973, 1.019126), 
            'L': 0.053069, 
            'a': 11.748268 },
    'RD1': {'base_pos': (0.007821, -0.008270, -0.005507),
            'base_rot': (5.735375, 0.291038, 1.346724), 
            'L': 0.045138, 
            'a': 17.032088 },
    'RD2': {'base_pos': (0.007522, -0.006817, -0.005311),
            'base_rot': (5.921209, 0.298909, 1.674322), 
            'L': 0.037207, 
            'a': 23.317510 },
    'RD3': {'base_pos': (0.007119, -0.005439, -0.005242),
            'base_rot': (6.107043, 0.294750, 2.001921), 
            'L': 0.029276, 
            'a': 30.518353 },
    'RD4': {'base_pos': (0.006589, -0.004051, -0.005296), 
            'base_rot': (0.009692, 0.279923, 2.329519), 
            'L': 0.021345, 
            'a': 38.531919 },
    'RD5': {'base_pos': (0.005863, -0.002585, -0.005492), 
            'base_rot': (0.195526, 0.256005, 2.657117), 
            'L': 0.013413, 
            'a': 47.249335 },
    'RD6': {'base_pos': (0.004815, -0.001028, -0.005877),
            'base_rot': (0.381360, 0.224825, 2.984715), 
            'L': 0.005482, 
            'a': 56.562579 },
    'RE1': {'base_pos': (0.007766, -0.007925, -0.007409), 
            'base_rot': (5.735375, 0.577741, 1.148655), 
            'L': 0.047361, 
            'a': 17.032088 },
    'RE2': {'base_pos': (0.007527, -0.006643, -0.007166), 
            'base_rot': (5.921209, 0.601418, 1.476254), 
            'L': 0.039429, 
            'a': 23.317510 },
    'RE3': {'base_pos': (0.007168, -0.005411, -0.007102), 
            'base_rot': (6.107043, 0.606532, 1.803852), 
            'L': 0.031498, 
            'a': 30.518353 },
    'RE4': {'base_pos': (0.006678, -0.004190, -0.007213),
            'base_rot': (0.009692, 0.594656, 2.131450), 
            'L': 0.023567, 
            'a': 38.531919 },
    'RE5': {'base_pos': (0.006010, -0.002960, -0.007514),
            'base_rot': (0.195526, 0.566751, 2.459048), 
            'L': 0.015636, 
            'a': 47.249335 },
    'RE6': {'base_pos': (0.005081, -0.001764, -0.008023),
            'base_rot': (0.381360, 0.523459, 2.786647), 
            'L': 0.007705, 
            'a': 56.562579 }
    }

LEFT_WHISKER_ARRAY_PARAMETERS = {
    'LA0': {'base_pos': (-0.005359, -0.010331, -0.000461), 
            'base_rot': (3.875237, -0.459404, 1.528261), 
            'L': 0.046402, 
            'a': 11.748268 },
    'LA1': {'base_pos': (-0.005439, -0.008908, -0.000501), 
            'base_rot': (3.689403, -0.534912, 1.200663), 
            'L': 0.038471, 
            'a': 17.032088 },
    'LA2': {'base_pos': (-0.005287, -0.007605, -0.000504), 
            'base_rot': (3.503569, -0.594480, 0.873064), 
            'L': 0.030540, 
            'a': 23.317510 },
    'LA3': {'base_pos': (-0.004935, -0.006385, -0.000450), 
            'base_rot': (3.317735, -0.637638, 0.545466), 
            'L': 0.022609, 
            'a': 30.518353 },
    'LA4': {'base_pos': (-0.004375, -0.005211, -0.000339), 
            'base_rot': (3.131901, -0.664269, 0.217868), 
            'L': 0.014677, 
            'a': 38.531919 },
    'LB0': {'base_pos': (-0.006705, -0.010424, -0.002045), 
            'base_rot': (3.875237, -0.204914, 1.726330), 
            'L': 0.048625, 
            'a': 11.748268 },
    'LB1': {'base_pos': (-0.006647, -0.008767, -0.002013), 
            'base_rot': (3.689403, -0.251200, 1.398731), 
            'L': 0.040693, 
            'a': 17.032088 },
    'LB2': {'base_pos': (-0.006403, -0.007298, -0.001974), 
            'base_rot': (3.503569, -0.292192, 1.071133), 
            'L': 0.032762, 
            'a': 23.317510 },
    'LB3': {'base_pos': (-0.006003, -0.005925, -0.001912), 
            'base_rot': (3.317735, -0.325616, 0.743535), 
            'L': 0.024831, 
            'a': 30.518353 },
    'LB4': {'base_pos': (-0.005427, -0.004565, -0.001824), 
            'base_rot': (3.131901, -0.349534, 0.415936), 
            'L': 0.016900, 
            'a': 38.531919 },
    'LB5': {'base_pos': (-0.004602, -0.003154, -0.001715), 
            'base_rot': (2.946067, -0.362305, 0.088338), 
            'L': 0.008969, 
            'a': 47.249335 },
    'LC0': {'base_pos': (-0.007594, -0.010270, -0.003886), 
            'base_rot': (3.875237, 0.031132, 1.924398),
            'L': 0.050847, 
            'a': 11.748268 },
    'LC1': {'base_pos': (-0.007434, -0.008551, -0.003698), 
            'base_rot': (3.689403, 0.019401, 1.596800), 
            'L': 0.042916, 
            'a': 17.032088 },
    'LC2': {'base_pos': (-0.007135, -0.007037, -0.003583), 
            'base_rot': (3.503569, 0.003318, 1.269202), 
            'L': 0.034985, 
            'a': 23.317510 },
    'LC3': {'base_pos': (-0.006720, -0.005615, -0.003516), 
            'base_rot': (3.317735, -0.015388, 0.941603), 
            'L': 0.027053, 
            'a': 30.518353 },
    'LC4': {'base_pos': (-0.006160, -0.004183, -0.003491), 
            'base_rot': (3.131901, -0.034805, 0.614005), 
            'L': 0.019122, 
            'a': 38.531919 },
    'LC5': {'base_pos': (-0.005380, -0.002657, -0.003523), 
            'base_rot': (2.946067, -0.052958, 0.286407), 
            'L': 0.011191, 
            'a': 47.249335 },
    'LC6': {'base_pos': (-0.004233, -0.000994, -0.003652), 
            'base_rot': (2.760233, -0.067923, -0.041192), 
            'L': 0.003260, 
            'a': 56.562579 },
    'LD0': {'base_pos': (-0.007990, -0.009891, -0.005860), 
            'base_rot': (3.875237, 0.269973, 2.122467), 
            'L': 0.053069, 
            'a': 11.748268 },
    'LD1': {'base_pos': (-0.007821, -0.008270, -0.005507), 
            'base_rot': (3.689403, 0.291038, 1.794869), 
            'L': 0.045138, 
            'a': 17.032088 },
    'LD2': {'base_pos': (-0.007522, -0.006817, -0.005311), 
            'base_rot': (3.503569, 0.298909, 1.467270), 
            'L': 0.037207, 
            'a': 23.317510 },
    'LD3': {'base_pos': (-0.007119, -0.005439, -0.005242), 
            'base_rot': (3.317735, 0.294750, 1.139672), 
            'L': 0.029276, 
            'a': 30.518353 },
    'LD4': {'base_pos': (-0.006589, -0.004051, -0.005296), 
            'base_rot': (3.131901, 0.279923, 0.812074), 
            'L': 0.021345, 
            'a': 38.531919 },
    'LD5': {'base_pos': (-0.005863, -0.002585, -0.005492), 
            'base_rot': (2.946067, 0.256005, 0.484475), 
            'L': 0.013413, 
            'a': 47.249335 },
    'LD6': {'base_pos': (-0.004815, -0.001028, -0.005877), 
            'base_rot': (2.760233, 0.224825, 0.156877), 
            'L': 0.005482, 
            'a': 56.562579 },
    'LE1': {'base_pos': (-0.007766, -0.007925, -0.007409), 
            'base_rot': (3.689403, 0.577741, 1.992937), 
            'L': 0.047361, 
            'a': 17.032088 },
    'LE2': {'base_pos': (-0.007527, -0.006643, -0.007166), 
            'base_rot': (3.503569, 0.601418, 1.665339), 
            'L': 0.039429, 
            'a': 23.317510 },
    'LE3': {'base_pos': (-0.007168, -0.005411, -0.007102), 
            'base_rot': (3.317735, 0.606532, 1.337741), 
            'L': 0.031498, 
            'a': 30.518353 },
    'LE4': {'base_pos': (-0.006678, -0.004190, -0.007213), 
            'base_rot': (3.131901, 0.594656, 1.010142), 
            'L': 0.023567, 
            'a': 38.531919 },
    'LE5': {'base_pos': (-0.006010, -0.002960, -0.007514), 
            'base_rot': (2.946067, 0.566751, 0.682544), 
            'L': 0.015636, 
            'a': 47.249335 },
    'LE6': {'base_pos': (-0.005081, -0.001764, -0.008023), 
            'base_rot': (2.760233, 0.523459, 0.354946), 
            'L': 0.007705, 
            'a': 56.562579 }
}

LEFT_WHISKER_NAMES = LEFT_WHISKER_ARRAY_PARAMETERS.keys() 
RIGHT_WHISKER_NAMES = RIGHT_WHISKER_ARRAY_PARAMETERS.keys()  

def calc_x_from_a_and_s(a,s):
    return (-1.4 + 133.7*a +1.27*s - 4334*a**2 - 7.3*a*s - 0.01*s*2
            + 62930*a**3 + 72.2*a**2*s - 0.2*a*s**2 - 407600*a**4
            - 565.2*a**3*s + 1.6*a**2*s**2 + 966000*a**5 + 1706*a**4*s
            - 4.8*a**3*s**2)

def get_angles_from_curvature(L, a):
    """ Gets the nodal angles based on the whisker's curvature.
        a is the constant defining the curvature, y = a*x**2
        L is an array of link lengths
    """
    # Get the angles based on a whisker with parabolic shape.
    ang = []
    (x0, y0) = (0., 0.)
    for l in L:
        s = x0 + l
        x = calc_x_from_a_and_s(a/1000,s*1000)/1000
        y = a*x**2
        dx = x - x0
        dy = y - y0
        (x0, y0) = (x, y)
        ang += [np.arctan(dy/dx)]
    ang = np.array(ang)-ang[0]
    
    # Now adjust angles to be relative to one another
    for j in range(len(ang)):
        ang[j] = ang[j] - sum(ang[:j])
    return ang

def parameters_from_name(name, N):
    parameters = {'N': N}

    if name in LEFT_WHISKER_ARRAY_PARAMETERS.keys():
        parameters.update(LEFT_WHISKER_ARRAY_PARAMETERS[name])

    elif name in RIGHT_WHISKER_ARRAY_PARAMETERS.keys():
        parameters.update(RIGHT_WHISKER_ARRAY_PARAMETERS[name])

    else:
        raise "Whisker name %s not found" %name

    return fill_parameters(parameters)

def fill_parameters(parameters):
    """ Must have N and L. """
    N = parameters['N']
    #swd = SINGLE_WHISKER_DEFAULT_PARAMETERS

    # Calculate link lengths.
    if np.isscalar(parameters['L']):
        parameters['L'] = (parameters['L']/N)*np.ones(N)

    # Calculate stiffness. 
    rbase = 100e-6
    taper = 0.1
    rho = 1.5e3
    zeta = .2
    E = 4.0e9
    I = calc_inertia(N, rbase, taper)
    parameters['k'] = E*I[:-1]/parameters['L']
    parameters['m'] = calc_mass(parameters['L'][0], N, rho, rbase, taper)
    parameters['c'] = calc_damping(N, parameters['k'], parameters['m'][1:],
            parameters['L'][0], zeta)

    return parameters  

def calc_inertia(N, rbase, taper):
    """The moment of inertia for a tapered cylinder with N points."""
    R = np.linspace(rbase, rbase*taper, N+1)
    return 0.25*np.pi*R**4

def calc_mass(L, N, rho, rbase, taper):
    """The mass at each node."""
    R = np.linspace(rbase, rbase*taper, N+1)
    return rho*np.pi*(R**2)*L

def calc_damping(N, k, m, L, zeta):
    """
    Calculates damping coefficients at each node from a given damping ratio.
    """
    return 2*L*np.sqrt(k*m)*zeta

